	IPv4 点播/广播系统 涉及到的知识点
I/O
UNIX环境高级编程 3~5章
第14章


文件系统
4,6,7章节
深入理解计算机系统

并发
信号: 第10章
多线程: 第10,11章


IPC:进程间通信
第8章 进程基础(涉及到多进程)
第13章, 守护进程
第15,16章

注意事项:
1. 弃用root用户
2. 重构
3. 课堂重点: 项目, 课堂代码, 实验, 推荐书籍(Unix环境高级编程, Unix网络编程, TCP/IP详解(卷一), 深入理解计算机系统)的课后题目	

								Linux_c系统开发学习笔记

I/O: input & output是一切实现的基础
	stdio标准IO
	sysio系统调用IO(文件IO)

stdio: FILE类型贯穿始终

首先补充两个错误处理的函数:
	perror();
	strerror();

	C语言提供了perror()和strerror()函数来显示与errno相关的文本消息.
	perror()函数显示您传给它的字符串,后跟一个冒号,一个空格和当前errno值的文本表示形式.
	strerror()函数,返回一个指针,指针指向当前errno值的文本表示形式.
	两者的区别在于perror()向stderr输出结果，若你的程序将标准错误输出重定向到/dev/null,那就看不到了,就不能用perror了
	而strerror的作用只是将errno对应的错误消息字符串返回.你可以自己决定咋样处理字符串,比如可以存到日志,也可以直接printf出来.

fopen(); 
fopen函数会返回一个FILE类型的指针,那么这个指针指向的结构体FILE是保存在内存中的什么位置(栈,静态区,还是堆)?

栈(✗)				静态区(✗)				堆(✓)
FILE *fopen(const char *restrict pathname, const char *restrict mode)
{
	/*	
	//如果返回的是在栈上,那么代码类似下面的写法
	FILE tmp;
	....

	return tmp;		//这样的实现,在fopen函数结束的时候,tmp也相应的消失了
	*/

	/*
	//静态区的实现
	static FILE tmp;
	...
	...
	
	return tmp;	//这样的实现的确可延长tmp的生命周期至fopen函数结束以后,
	但是有缺点,因为static变量使用的是同一块内存, 如果你调用fopen()两次,那么后面调用的返回值会覆盖第一次的返回值
	*/

	/*
	返回值在堆上的实现
	*/
	FILE *tmp = NULL;

	tmp = malloc(sizeof(FILE));	//有malloc操作就必定会有对应的free来释放内存,free操作在fclose()中
	tmp->xx = xxx;
	....

	return tmp;
}

fopen() 有两个参数,第一个参数是文件名称,第二个参数是打开的模式mode
mode主要有r,r+,		w,w+,	a,a+
这其中只有r和r+要求文件必须存在,如果文件不存在就会返回NULL,
w和a模式,如果文件不存在就创建文件

还有一种模式b,这种模式在linux环境下没有意义,它是在windows下,表示以2进制的方式


fclose();

小技巧: 如果一个函数返回一个指针,并且关于这个指针还有相关的互逆操作(比如:fopen, fclose),那么这个指针指向的内容是在堆上.
如果没有互逆操作的函数(由于种种原因造成的),那么这个指针指向的内容是在堆上还是在静态区是不能确定的,需要你自己写测试代码来判断.

fgetc();
fputc();

fgets();
	char *fgets(char *buf, size, FILE *stream);
	知识点:对于任何一个非空的文件,文件中的最后都一定会有一个字符'\n'(可以使用cat -A filename 查看文件中的所有字符)
	fgets函数的正常结束有两种情况:
		(1)函数读到了size-1个字节, 第size个字节是专门预留给'\0'的
		(2)函数遇到了'\n'
		但是还有一种边界情况, 考虑下面的情况
			#define SIZE 	5	
			char buf[SIZE]
			char *fgets(buf, SIZE, FILE *stream);

			现在有一个文件test的内容是:
			abcd
			请问fgets函数需要读取多少次才能读完文件test的全部内容.
			答案:是2次.
			根据上面的常识我们知道文件的内容其实是abcd\n	
			宏定义buf的SIZE是5, 所以一次最多只能读取SIZE-1(4)个字节

			第1次:abcd'\0'
			第2次:'\n''\0'
			


fputs();

fread();
	size_t fread(void *ptr,size_t size, size_t nmemb,FILE *stream);

fwrite();
	size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

fread()和fwrite()会从文件中读取或写入item,单个item的大小是size, nmemb表示要读/写多少个item.
On  success,  fread() and fwrite() return the number of items read or written.  This number equals the number of bytes transferred only
       when size is 1.  If an error occurs, or the end of the file is reached, the return value is a short item count (or zero).

fread()和fwrite()在使用上有限制,它们只能在item的大小是固定长度的情况下才能正常调用,如果单个item的大小不固定,那么就会出错.
fread和fwrite在他们不能读取或写入一个完整的item的时候,他们的返回值为0.
考虑下面的情况:
fread(buf, size, nmemb, fp)
我们从文件中读取数据, 同样是读数据我们可以fread(buf, 1, 10, fp)也可以fread(buf, 10, 1, fp);
同样是调用fread,有什么区别. 
分为有两种情况
1-->数据量充足
2-->只有5个字节


fread(buf, 1, 10, fp);	//读取10个item,每个item的大小是1个字节
1--> 返回值是10-->10字节
2-->读取5个item,每个item的大小是1个字节, 返回值是5-->5字节

fread(buf, 10, 1, fp);//读取1个item, item大小为10字节
1--> 返回值是10 --> 10字节
2-->读取不了1个10字节的item,文件中只有5字节不够,一个item,返回值是0 -->  ??? 你就不能根据返回值来判断文件中还剩多少字节

所以推荐使用单字节读取的方式,fread(buf, 1, 10, fp);

printf();
scanf();

fseek(); //设置文件位置指针到指定的位置
	int fseek(FILE *stream, long offset, int whence);
ftell();//The ftell() function obtains the current value of the file position indicator for the stream pointed to by stream.
    long ftell(FILE *stream);
rewind();
    void rewind(FILE *stream);

	rewind函数相当于 fseek(stream, 0L, SEEK_SET)

fseek函数和ftell函数由于历史原因,在使用起来有缺陷. fseek函数中的参数offset是long类型,ftell的返回值是long类型.
以ftell函数来说,这个函数返回的是当前文件指针所在的位置.这个返回值一般都是一个正整数,除非ftell函数运行出错,才返回-1.
而通常状况下(32位)long类型就是带符号的长整型,它的取值范围: -2^31 ~ 2^31-1 也就是 -2G ~ 2G-1. 
	(但是我用centos8的64位虚拟机,查看limits.h文件中long的取值范围是-2^63 ~ 2^63-1)
也就是说如果一个文件的大小超过2G,ftell函数就不能正常返回文件指针的位置了, 而且负数的范围基本都浪费了,ftell最多返回-1.
同理, fseek函数中的offset的最大值也就是2G-1 ,这个数值在以前硬件还没有蓬勃发展起来的时候,还是足够用的,但是现在就不一定了.
	(我装了个centos7.9的32位版本,复制了一个3.9G的manjaro系统的ISO文件,准备测试一下ftell的出错情况,
	发现还没到调用ftell函数. fopen函数就已经报错了, fopen(): File too large)
为了解决这个问题所以后来就有了fseeko和ftello函数

int fseeko(FILE *stream, off_t offset, int whence);
off_t ftello(FILE *stream);

使用off_t来代替long类型, off_t具体占几个字节可以使用宏定义来指定(man page里面有写怎么指定).

但是通过查看man page知道这两个函数遵循的标准是
CONFORMING TO
       POSIX.1-2001, POSIX.1-2008, SUSv2.
	   
也就是说fseeko, ftello不是C标准的函数,它们两个是方言.所以使用起来有限制.不能完全使用fseeko替代fseek
那么如果文件大小超过2G,就得用其他方法来定位文件位置指针

fflush();
缓冲区的作用: 大多数情况下是好事, 合并系统调用

行缓冲: 
	换行时候刷新,
	满了的时候刷新,
	强制刷新(标准输出就是这样的,因为标准输出是终端设备)

全缓冲:
	满了的时候刷新,
	强制刷新(默认,只要不是终端设备的其他设备)

无缓冲:
	如stderr, 需要立即输出的内容

	setvbuf函数可以设置缓冲区的模式, 具体查看man手册
		_IONBF: unbuffered
		_IOLBF: line buffered
		_IOFBF: fully buffered

	通常情况下我们不会使用到setvbuf函数

getline(); 它可以完整的获取文件中的一行内容,无论你这一行有多长,它都能吃下,但是getline函数也不是标准库中的函数
ssize_t getline(char **lineptr, size_t *n, FILE *stream);
getline中的二级指针lineptr, 它的创建时在getline中malloc出来的,但是并没有对应的接口来free这块内存.需要你自己去free创建出来的lineptr

CONFORMING TO
       Both getline() and getdelim() were originally GNU extensions.  They were standardized in POSIX.1-2008.


临时文件: 1.如何不冲突的创建临时文件 2.及时销毁
tmpname和tmpfile
	tmpnam函数可以返回一个可用的临时文件名称,它的问题是,只返回一个文件名称,但是文件的创建还需要你自己fopen.
	如果有两个进程A,B, A从tmpnam中获得一个文件名,但是还没有创建它, 
	B进程调用tmpnam恰巧返回了和A进程相同的文件名(因为这时文件还没有创建,所以在tmpnam看来,刚才给A进程的文件名还是可用的)
	然后A,B进程去创建文件,那么就会出现问题,两个进程使用同一个文件名称创建临时文件,如果fopen的model是w, 
	那么第一个进程创建的文件会被第二个进程覆盖掉
	
	tmpfile函数直接返回给你一个FILE * 所以它要比上面的tmpnam好用一些





文件IO(即,系统调用IO)

文件描述符(fd)是在文件IO中贯穿始终的类型

文件描述符的概念(整型数,数组下标,文件描述符优先使用当前可用范围内最小的)
	回顾标准IO(stdio)操作, 我们都是依赖于fopen函数返回一个FILE *fp. FILE是一个结构体,结构体中包含了文件的相关信息,比如文件的位置指针pos,等等.
	在系统IO,与FILE *fp 类似,系统IO中也有一个结构体,这个结构体中包含了文件的信息(inode), 文件的位置指针pos等等. 但是系统IO中,linux把这个结构体的
	具体信息做了隐藏,它没有将这个结构体指针直接返回给调用者.open函数产生的这个结构体指针被保存在一个数组中,取而代之的是返回这个结构体在数组中的位置(下标)
	这个下标就是文件描述符.调用者通过这个下标来间接的访问open产生的结构体. 标准IO的实现是由系统IO来完成的,所以我们可以推断,FILE*和系统IO中的结构体
	应该有联系, 在FILE结构体中有一个成员就是文件描述符(fd). 系统的每一个进程都会维护一个这样的数组来存放结构体指针.这个数组的默认大小是1024,
	是不是很熟悉? 我们在测试fopen能打开多少文件的时候,返回1021, 另外3个是stdin,stdout,stderr. 
	ulimit命令能够修改打开文件个数的上限,因为它是在修改这个数组的大小.

文件IO操作: open, close, read, write, lseek
	cache和buffer的区别?
	粗略的可以认为cache是读的加速机制,buffer是写的加速机制(老师说的). 也有弹幕说buffer是用户态读写数据暂存区,cache是内核态读写加速机制(不知道对不对)

	atime:最后一次读的时间
	mtime:最后一次写的时间
	ctime:最后一次亚数据的修改时间

	open(); 返回一个文件描述符(非负整数,因为它是数组的下标), 如果返回-1,表示出错.
	int open(const char *pathname, int flags);
    int open(const char *pathname, int flags, mode_t mode);
	open函数有两种形式,一种是两个参数,另外一种是3个参数.
	参数flag必须包含一种access modes(O_RDONLY, O_WRONLY or O_RDWR)
	flag还包括file creation flag和file status flag
	file creation flag 和 file status flag 并不是必须的.
	file creation flag: O_CLOEXEC, O_CREAT, O_DIRECTORY, O_EXCL, O_NOCTTY, O_NOFOLLOW, O_TMPFILE, and O_TRUNC.
	file status flag: 太多了, 可以查看man 2 open
	当你调用open函数的时候,如果你的flags参数包括file creation flag,那么必须调用3个参数的open函数,第3个参数mode_t mode是文件的权限(比如0644,0755).

	思考: 2个参数的open函数和3个参数的open函数是重载实现的么?
		C语言没有重载, C语言是用可变参数来实现这两个open函数的. 
		如果没有告诉你这是C语言环境,context有可能是C,也可能是C++,怎么继续判断两个函数到底是重载实现的还是可变参数实现的呢?
		可以给open函数传递多个参数(超过3个参数), 如果编译产生错误,那就说明参数的个数是固定的,也就是重载实现,
		反之,如果编译没有语法错误,那就是可变参数实现的.

	ssize_t read(int fd, void *buf, size_t count);
	read函数的返回值是读到的字节数,如果返回0,表示读到了文件末尾. -1表示出错.
	size_t:无符号整型
	ssize_t:有符号整型
	The types size_t and ssize_t are, respectively, unsigned and signed integer data types specified by POSIX.1.

	ssize_t write(int fd, const void *buf, size_t count);

文件IO与标准IO的区别
举例: 传达室老大爷跑邮局  
	文件IO方式:老大爷每收到一封需要寄出的信件,都立刻跑去邮局寄信
	标准IO方式:老大爷先等待需要寄出的信件到达一个阈值(比如20封信), 当需要寄出的信件数量达到20封的时候,老大爷跑一趟邮局寄信.
		如果在寄出信件还没有达到阈值的时候比方说现在只有5封信,然后又来了一封信,这封信件需要立刻寄出,那么老大爷就立刻带着这6封信去邮局寄信.(fflush)

区别: 响应速度 & 吞吐量(缓冲区)
文件IO的响应速度快,标准IO的吞吐量大
文件IO是实打实的系统调用,即从user态切换到kernel态,完成任务,然后再从kernel态切换回user态
标准IO的作用就是依赖这个缓冲区来合并系统调用

问题:如何是一个程序变快?
从响应速度和吞吐量两个方面着手,如果需要响应速度快,就文件IO. 要吞吐量的话就系统IO
从用户体验的角度来说的话,提高吞吐量的效果很可能比提高系统调用的响应速度的效果好

tips: 在相同的情况下,如果标准IO和文件IO都可以完成任务的时候,推荐使用标准IO

Note: 标准IO和文件IO不能混用. FILE结构体和文件描述符对应的结构体有关联,但是并不是同一个东西.比如:这两个结构体都有文件当前位置的指针pos,
但是由于有缓冲区的存在,FILE结构体中的pos指针的值,和fd对应的结构体中的pos指针的值很可能就不一样.


转换函数: 
	int fileno(FILE *stream);
	fileno函数可以将FILE *指针转换成对应的文件描述符fd. 将标准IO转换成文件IO

	FILE *fdopen(int fd, const char *mode);
	fdopen函数将文件描述符fd转换成对应的FILE *指针. 将文件IO转换成标准IO


IO的效率问题

问题: 使用time命令去测试我们前面写的mycopy(用它来复制一个大文件,找个5G的文件,最小3G)的执行时间, 不断的更改buffer的size直到这个size达到16M个字节.
记录每次的执行时间,每次循环了多少次读写操作, 找到buf_size的性能拐点是多大? 老师预计buf_size在16M字节的时候,mycopy程序会段错误,
如果没出错,继续增加buf_size的值,直到出错为止. 考虑一下buf_size出错时的大小和当前系统资源的配置(弹幕提示是当前栈的大小),有什么联系?

这里我使用了manjaro-gnome-22.0.4-230222-linux61.iso,文件大小3.9G(4081616896字节)
CentOS 8 VmWare配置: 1 processors, 4 cores per processor, 2GB memory, 
[xin@localhost ~]$ ulimit -a
...
stack size              (kbytes, -s) 8192
...

Manjaro配置: 真实物理机, AMD1700x 8核16线程, 32GB memory
 ulimit -a   
-t: cpu time (seconds)              unlimited
-f: file size (blocks)              unlimited
-d: data seg size (kbytes)          unlimited
-s: stack size (kbytes)             8192
-c: core file size (blocks)         unlimited
-m: resident set size (kbytes)      unlimited
-u: processes                       128051
-n: file descriptors                1024
-l: locked-in-memory size (kbytes)  8192
-v: address space (kbytes)          unlimited
-x: file locks                      unlimited
-i: pending signals                 128051
-q: bytes in POSIX msg queues       819200
-e: max nice                        0
-r: max rt priority                 0
-N 15: rt cpu time (microseconds)   unlimited


readCount:读操作循环的次数
writeCount:写操作循环的次数
	+------------------------------------------------------------------------------------------------------------+    
	| BUF_SIZE |    real    |    user    |    system    |    readCount    |    writeCount    |    environment    |
	+------------------------------------------------------------------------------------------------------------+
	|   1K     | 0m12.247s  | 0m0.286s   | 0m9.111s     |    3985954      | 	3985954 	 |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   2K     | 0m11.161s  | 0m0.146s   | 0m7.829s     |    1992977      |     1992977      |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   4K     | 0m10.875s  | 0m0.076s   | 0m6.639s     |    996489       |     996489       |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   8K     | 0m10.635s  | 0m0.046s   | 0m6.249s     |    498245       |     498245       |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   16K    | 0m10.543s  | 0m0.021s   | 0m6.167s     |    249123       |     249123       |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   32K    | 0m10.768s  | 0m0.016s   | 0m5.999s     |    124562       |     124562       |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   64K    | 0m10.565s  | 0m0.010s   | 0m5.959s     |    62281        |     62281        |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   128K   | 0m10.574s  | 0m0.010s   | 0m6.108s     |    31141        |     31141        |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   256K   | 0m10.335s  | 0m0.005s   | 0m6.096s     |    15571        |     15571        |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   512K   | 0m10.395s  | 0m0.002s   | 0m6.172s     |    7786         |     7786         |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   1M     | 0m10.490s  | 0m0.003s   | 0m6.280s     |    3893         |     3893         |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   2M     | 0m10.480s  | 0m0.008s   | 0m6.277s     |    1947         |     1947         |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   4M     | 0m10.735s  | 0m0.007s   | 0m6.133s     |    974          |     974          |  CentOS 8 VmWare  |
	+------------------------------------------------------------------------------------------------------------+
	|   8M     |    Segmentation fault (core dumped)                                            CentOS 8 VmWare  |  
	+------------------------------------------------------------------------------------------------------------+
	

	+------------------------------------------------------------------------------------------------------------+    
	| BUF_SIZE |   total    |    user    |    system    |    readCount    |    writeCount    |    environment    |
	+------------------------------------------------------------------------------------------------------------+
	|   1K     | 6.673s     | 0.32s      | 6.35s        |    3985954      | 	3985954 	 |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   2K     | 4.025s     | 0.14s      | 3.88s        |    1992977      |     1992977      |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   4K     | 2.468s     | 0.08s      | 2.38s        |    996489       |     996489       |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   8K     | 1.947s     | 0.07s      | 1.88s        |    498245       |     498245       |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   16K    | 1.656s     | 0.02s      | 1.63s        |    249123       |     249123       |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   32K    | 1.493s     | 0.01s      | 1.48s        |    124562       |     124562       |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   64K    | 1.404s     | 0.01s      | 1.39s        |    62281        |     62281        |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   128K   | 1.479s     | 0.00s      | 1.47s        |    31141        |     31141        |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   256K   | 1.604s     | 0.00s      | 1.60s        |    15571        |     15571        |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   512K   | 1.514s     | 0.00s      | 1.51s        |    7786         |     7786         |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   1M     | 1.590s     | 0.00s      | 1.50s        |    3893         |     3893         |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   2M     | 1.748s     | 0.00s      | 1.74s        |    1947         |     1947         |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   4M     | 1.536s     | 0.00s      | 1.53s        |    974          |     974          |    Manjaro        |
	+------------------------------------------------------------------------------------------------------------+
	|   8M     |    Segmentation fault (core dumped)                                              Manjaro        |  
	+------------------------------------------------------------------------------------------------------------+

文件共享:多个任务共同操作一个文件或者协同完成任务.
	问题:写一个程序删除一个文件的第10行(这里没有说明文件中每行文本的长度是否是固定的).

		补充函数: truncate/ftruncate  把一个文件按照指定的大小截断
			int truncate(const char *path, off_t length);
			int ftruncate(int fd, off_t length);

		思路1:
			while()
			{
				lseek 11 + read + lseek 10 + write
			}

		思路2: 减少系统io的次数
			首先创建打开文件2次
			1 --> open r --> fd1 --> lseek 11
			2 --> open r+ --> fd2 --> lseek 10

			while()
			{
				1-->fd1-->read
				2-->fd2-->write	
			}
		思路3: 使用多个进程
			process1 --> open --> r
			process2 --> open --> r+

			通过进程间通信
			p1->read -> p2->write

		思路4: 使用线程
			thread1 --> open --> r
			thread2 --> open --> r+

			通过进程间通信
			t1->read -> t2->write

原子操作:不可分割的操作
原子: 不可分割的最小单位
原子操作的作用: 解决竞争和冲突
比如: tmpname函数就不是一个原子操作


程序中的重定向: dup, dup2
	
int dup(int oldfd);
dup函数可以复制一个文件描述符,它的返回值就是根据oldfd复制出来的文件描述符,新复制的文件描述符和旧的文件描述符指向同一个文件.
返回的文件描述符会使用当前环境下可用的最小的文件描述符(默认情况下,每个进程都有3个文件描述符0,1,2对应代表标准输入流,标准输出流,标准错误流,
假设你open一个test.txt文件, 那么打开test.txt文件的描述符fd就是3, 接着你关闭标准输出流,close(1), 然后使用dup(test.txt文件的描述符),
这个dup操作返回的就是1,因为1在刚才被关闭了,所以1是当前可用的最小的文件描述符, 这时文件描述符1和文件描述符3都指向test.txt文件,
这就相当于把标准输出流重定向到了test.txt文件,任何打印到标准输出流的内容都输出到了test.txt文件中).

dup的操作流程基本上就是

	文件描述A = open(xxx文件);
	close(文件描述符B);
	dup(文件描述符A);
这样就把文件描述符A到了文件描述符B上,文件描述符A和B都指向同一个文件. 这里有一个小问题就是dup的时候,需要先close一个文件描述符.
close和dup这两行代码不是原子操作,在竞争或者冲突的条件下就有可能出错. 所以就有了dup2这个函数.

int dup2(int oldfd, int newfd);
dup2函数其实就是将close和dup操作封装成了一个原子操作,它会先close(newfd),然后dup(oldfd)
使用dup2函数的时候需要注意:
	1.如果oldfd不是一个可用的文件描述符,那么dup2函数不会去close(newfd)
	2.如果oldfd是一个可用的文件描述符,并且newfd和oldfd的值是一样的,那么dup2函数不会做任何事情,直接返回newfd
其实还有dup3函数,不过这个函数是linux的方言

同步: sync, fsync, fdatasync

	sync: 同步(内核层面的)buffer和cache到磁盘, 在涉及到设备的开发的时候,在设备被卸载之前应该同步buffer和cache的内容
	fsync: 同步一个文件的buffer,cache
	fdatasync: 只同步数据(文件的内容),不同步亚数据(访问时间,修改时间, 文件的属性...)


fcntl(): 文件描述符所变的魔术(管家级别的函数)几乎都来源于该函数

int fcntl(int fd, int cmd, ... /* arg */);
	对一个文件描述符执行cmd命令, 最后的可变参数是你要执行的cmd命令所需要的参数列表.fcntl函数的返回值不是固定的,它根据你要执行的cmd的
种类不同,返回值的意义也不一样,参考man page

ioctl(): 管理设备相关的内容

int ioctl(int fd, unsigned long request, ...);
	和fcntl类似,因为linux一切皆文件的思想,我们对于各种设备的操作都类似于文件操作.
	所以这个函数就是可以对设备(抽象成了fd)执行各种各样的request(命令),最后的可变参数是你要执行的request所需要的参数
	使用man ioctl_list来查看支持的设备列表, ioctl_list记录了Linux 内核自1.3.27版本以来支持的所有设备列表

/dev/fd/目录: 虚目录, 显示的是当前进程的文件描述符信息. 这个目录就像一个镜子,谁访问它,它就显示谁(这个进程)的文件描述符信息
例如: ls /dev/fd 就显示的是ls这个进程中的文件描述符信息. 如果你想知道你的程序所在的进程有哪些文件描述符信息,那么就在你的程序中
去open这个目录


文件系统

大作业: ls命令的实现, 写一个小程序myls,完成ls的功能

一. 目录和文件

1. 获取文件属性
	stat,fstat,lstat
	int stat(const char *pathname, struct stat *statbuf);
	int fstat(int fd, struct stat *statbuf);
	int lstat(const char *pathname, struct stat *statbuf);
	这3个函数做的是同一件事情,获取文件属性,只不过stat根据文件名称pathname, fstat是用文件描述符fd, lstat的参数pathname是一个符号链接(symbolic link)
	stat:通过文件路径获取属性,面对符号链接文件时,获取的是所指向的源文件的属性
	fstat:通过文件描述符获取属性
	lstat: 面对符号链接文件时,获取的是符号链接文件的属性(stat获取的是源文件的属性,这就是lstat和stat的重要区别)

	struct stat {
		dev_t     st_dev;         /* ID of device containing file */
		ino_t     st_ino;         /* Inode number */
		mode_t    st_mode;        /* File type and mode */
		nlink_t   st_nlink;       /* Number of hard links */
		uid_t     st_uid;         /* User ID of owner */
		gid_t     st_gid;         /* Group ID of owner */
		dev_t     st_rdev;        /* Device ID (if special file) */
		off_t     st_size;        /* Total size, in bytes */
		blksize_t st_blksize;     /* Block size for filesystem I/O */
		blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */

		/* Since Linux 2.6, the kernel supports nanosecond
			precision for the following timestamp fields.
			For the details before Linux 2.6, see NOTES. */

		struct timespec st_atim;  /* Time of last access */
		struct timespec st_mtim;  /* Time of last modification */
		struct timespec st_ctim;  /* Time of last status change */

	#define st_atime st_atim.tv_sec      /* Backward compatibility */
	#define st_mtime st_mtim.tv_sec
	#define st_ctime st_ctim.tv_sec
	};
	请注意, st_size != st_blksize * st_blocks 不用奇怪,这是因为linux的文件系统本身决定的.
	请区别 st_dev和st_rdev, st_dev是文件本身所在的设备id, st_rdev是特殊文件(插入的U盘...)的device id

tips: 自己写的函数的返回值和参数类型都不建议使用char,用int来代替char, 因为char类型所表示的数字是有符号的还是无符号的C标准里面没有明确说明.

tips: 使用ctags在/usr/include目录下执行ctags -R, 然后cd到/usr/include目录下,就可以结合vim来查看一些定义.
	例如:vim -t FILE就可以查看FILE相关的定义是_IO_FILE, 然后继续vim -t _IO_FILE就可以查看到结构体的具体定义

	结合Practical Vim这本书,可以使用ctrl-r,ctrl-w组合键来快速将光标所在的字符显示在命令模式下
	vim -t FILE 的显示如下
	xxxx
	xxxx
	/* The opaque type of streams.  This is the definition used elsewhere.  */
	typedef struct _IO_FILE FILE;
	xxxx
	然后我们可以把光标定位在_IO_FILE上面,然后再命令模式下继续查找_IO_FILE的定义
	:!vim -t ctrl-r,ctrl-w   等价于你自己手写 :!vim -t _IO_FILE



2. 文件访问权限
	stat结构体中的成员st_mode是一个16位的位图,用于表示文件类型,文件访问权限,及特殊权限为
3. umask
	作用:防止产生权限过松的文件

4. 文件权限的更改/管理
	chmod函数和fchmod函数

5. 粘滞位
	t位,设置t位的作用是把某一个命令的使用痕迹进行保留,保留之后下次再装载这个模块的时候就会比较快.
	通俗的说就是在内存中保存某条命令的使用痕迹,下次装载这条命令会比较快.这个t为最早的设计用途是用来给一个可执行的二进制文件来使用的,
	现在由于有了page cache(常用的数据留存在内存中),t位就不是那么常用了. 
	现在t位主要是用于对目录来设置的.例如/tmp目录就是一个设置t位的目录,这个目录设置t为之后,各个用户对于/tmp目录甚至对其中的文件的操作就比较特殊化了.
	对于一个多人可写的目录/tmp,如果设置的stick,则每个用户只能删除自己的文件,其目的就是为了防止普通用户删除其他用户在这个目录下创建的文件

6. 文件系统: FAT, UFS	(这两个文件系统是同一时期的产物,FAT闭源,UFS是开源的)
	文件系统:文件或数据的存储和管理
	FAT: 静态单向链表, 他是用数组实现的,
		缺点主要有:
			1. 数组的大小是写死的,所以FAT文件系统能处理的文件大小是有限制的
			(不过以前的U盘,硬盘也没有现在那么大,而且以前的硬盘基本上都需要分区,分区的一个目的也就是避免磁盘过大,分区也能购提高查询效率)
			2.单向链表本身只能从头开始顺序查询,
	UFS: 磁盘可以有若干个分区,分区的下面分成许多个柱面组/块组, 每个柱面组的结构类似下面的情况
	
					单个块组的结构	
	+--------------------------------------------------+
	| description | inode位图 | 块位图 | inode | data块 |
	+--------------------------------------------------+


	description:描述性信息,例如当前块组的信息
	inode位图: 和inode一一对应,使用位图记录当前inode的占用情况
	data位图: 和data块一一对应,使用位图记录当前data块的占用情况
	inode节点: 简单来说这里面是结构体类型的数组
	data块: 存储真正数据的数据块,一般来说data块的大小都是4k起步 
	inode和data不是一一对应的,在文件系统构建的时候就已经根据一个公式确定了inode节点和data块的比例关系

	inode中存放了几乎所有的文件信息(文件名本身不保存在inode中,文件名是保存在目录文件中的),inode是一个结构体
	struct 
	{
		stat函数能取得的所有文件信息,
		亚数据信息,
		与用户无关的内容(与编程无关),
		[数据块指针组],	 
		这个数组的大小是15, 前12个是直接的数据块指针, 最后三个指针分别是:1级间接块指针,2级间接块指针,3级间接块指针.
		直接的数据块指针是指向data块的指针,假设一个数据块的大小是1K的话,那么默认的这12个指针能解决12K大小的文件,
		如果文件大小超过12K,就会动用1级间接块指针,这个指针指向一个1K大小的数据块,这个数据块中存放的全部都是指向data块的指针
		假设环境是32位的话(指针的长度是4个字节),这个1K的数据块能够存放256个数据块指针,每个数据块指针指向的数据块大小为1K
		也就是说1级间接指针能处理的文件大小范围是0~(256+12)K.如果文件的容量还是不够那么就动用2级间接指针,2级间接指针指向一个1K的数据块,
		这个数据块中存放的是256个1级间接指针,每个1级间接指针最多能存放256K的数据.所以2级间接指针能处理的文件大小范围是256*256K + 12K(大约是64M)
		如果文件的大小还是超过这个容量,那么就动用3级间接指针,3级间接指针指向一个1K的数据块,这个数据块存放了256个2级间接指针,每个2级间接指针最多
		能存放大约256*256K+12K(大约是64M)的数据,所以3级间接指针能处理的文件大小范围是256*256*256K + 12K(大约是16G),如果单个数据块的大小是4K的话,
		那么3级间接指针能处理的文件大小的范围大概是64G

	}

	目录文件
	{
		inode --> filename 	//这是一个目录项
	}
	思考:一个无符号32位整形数的二进制表示中,有多少个1?(位图的应用)
	
7. 硬链接,符号链接
	硬链接和源文件的inode是相同的,其实硬链接就是在目录文件中的一个目录项, 假设你对一个文件创建了一个硬链接, 然后你删除掉源文件,
	硬链接还是能访问源文件的.它有点类似于两个指针指向同一个数据块,加入你删除了一个指针,另外一个指针还是能正常访问数据块的.
	硬链接的文件类型是"普通文件"(-)

	硬链接与目录项是同义词,且简历硬链接有限制:不能给分区建立硬链接(不同的分区,有可能有重复的inode),不能给目录建立硬链接
	符号链接的优点: 可以跨分区创建符号链接,可以给目录建立符号链接

	符号链接: 对一个文件创建出来符号链接,通过符号链接你可以访问源文件, 但是符号链接是一个独立的文件,它和源文件的文件属性(inode,亚数据等等)都是不同的. 
	符号链接的size就是源文件的文件名称的长度.删除源文件之后,是不能通过符号链接来访问源文件了.
	符号链接的文件类型是"链接"(l)

	相关函数: 
		link, unlink, symlink
		remove, rename

8. utime
	这个函数可以更改一个文件的access time(最后一次读取时间)和modify time(最后一次写入时间)

9. 目录的创建和销毁
	mkdir() 
	rmdir()

10. 更改当前工作路径
	chdir()
	fchdir()
	这两个函数可以突破chroot,假根技术
	getcwd()

11. 分析目录/读取目录内容
glob():解析模式/通配符
globfree(): 释放glob函数解析的结果所占用的内存


使用glob函数解析一个路径,查看该路径下符合要求的文件有哪些?

 例如:
 ./myglob /etc/l*.conf 		显示/etc下所有l开头的conf文件
 ./myglob "/home/xin/*"    	显示/home/xin下的所有文件(不包含隐藏文件)
 ./myglob "/home/xin/.*" 	显示/home/xin下的所有隐藏文件,双引号"是为了防止shell扩展通配符

opendir()
closedir()
readdir()			readdir可以读取目录下的所有文件(包括隐藏文件)
rewinddir()
seekdir()
telldir()

二. 系统数据文件和信息

1. /etc/passwd
	并不是所有系统都有这个/etc/passwd文件, 
		FreeBSD早期的版本使用的是BDB(伯克利DB),不过我试了一下FreeBSD 13.0-RELEASE这个版本是有passwd文件的.
		HP UNIX --> fs(文件系统), HP小型机使用文件系统来完成类似的工作
	getpwuid();
	getpwnam();
2. /etc/group
	getgrgid();
	getgrnam();

	hash 	混淆	不可逆	如果原串相同,所得的结果也相同, 防备管理员监守自盗
	加密	-- 		解密
	x % 5 = 2
	7 % 5 = 2
	2 % 5 = 2
	12 % 5 = 2

	加密: 安全(攻击成本大于收益)

	安全? 穷举: 口令随机校验

3. /etc/shadow
	getspnam()
	getspent();
	crypt(const char *phrase, const char *setting); 
	//crypt函数的第2个参数settings,要求一个字符串的形如$id$salt$,其中id是选用的加密算法,salt是加密用来和原始串混杂在一起来确保加密的可靠性
	getpass();


4. 时间戳: time_t(计算机喜欢的类型), char *(普通用户喜欢的类型), struct(程序员喜欢的类型), 下面的这些函数就是在这3中类型中进行转换的,
具体参见:images/time.png
	struct tm {
		int tm_sec;    /* Seconds (0-60) */
		int tm_min;    /* Minutes (0-59) */
		int tm_hour;   /* Hours (0-23) */
		int tm_mday;   /* Day of the month (1-31) */
		int tm_mon;    /* Month (0-11) */
		int tm_year;   /* Year - 1900 */
		int tm_wday;   /* Day of the week (0-6, Sunday = 0) */
		int tm_yday;   /* Day in the year (0-365, 1 Jan = 0) */
		int tm_isdst;  /* Daylight saving time */ 		//夏令时,冬令时
    };

	time_t time(time_t *tloc);
		time函数的返回值和参数time_t的指针,都是从EPOC(1970年1月1日)到现在的秒数,既然这个参数和返回值是同一个东西,
		所以这个函数的主要用法有两种: 
			(1) time_t stamp;	  
				time(&stamp);		//通过参数获取结果
			(2) time_t stamp;
				stamp = time(NULL);	//通过返回值获取结果
			我还想试一下,同时使用指针和返回值 
				time_t stamp1, stamp2;
				stamp2 = time(&stamp1);
			看看stamp1,stamp2是不是同一个值? 做了实验,是相等的值
			

	struct tm *gmtime(const time_t *timep); 		//格林尼治时间
	struct tm *localtime(const time_t *timep);
	time_t mktime(struct tm *tmp);
	gmtime,localtime函数都是将time_t类型转换成struct tm,只不过一个是格林尼治时间另一个是本地时间.
	mktime函数是把struct tm转换成time_t类型的秒数, 请注意: mktime的参数struct tm *tm并没有被const修饰, 所以传入的结构体有可能被修改,
	这个参数可能被修改的"副作用",有时候对我们来说是可以利用的. 比如:我们将当前时间的struct tm做一些修改(将天数增加100天,即tm_mday +=100,等等),
	mktime会自动将修改后的结构体对应的time_t返回.这样就是一个简单的日期计算器了.
		Note:修改天数的变量是struct tm结构体的tm_mday而不是tm_yday.

	size_t strftime(char *s, size_t max, const char *format, const struct tm *tm);
	strftime函数可以格式化日期字符串, 参数char *s和size_t max定义了一块内存空间, 
	strftime函数就是在struct tm结构体中提取需要的字段(需要哪些字段是在参数format中指定的),然后存放到char *s和size_t定义的内存中去,
	char *s就是格式化好的字符串

三. 进程环境

1. main函数
	int main(int argc, char *argv[])
	main函数在早期的时候是3个参数,除了上面的两个参数外,第3个参数是环境变量的相关参数,后来环境变量单独做成一个模块,这个参数才从main函数中移除了

2. 进程的终止(非常重要,请一字不差的背下来)
	正常终止(5种):
		A. 从main函数返回
		B. 调用exit函数
			void exit(int status); //理论上32位环境int的返回值-2g ~ 2g-1
			exit函数可以结束进程,并且会将所有用atexit函数和on_exit函数注册过的函数,按照它们注册顺序的逆序,依次调用.
			查看man手册,exit将返回值 status & 0377 返回给parent, 0377表示8进制的377也就是2进制的11111111,
			所以status & 0377表示只取status的低8位,也就是说exit函数的返回值范围是带符号的8位2进制数的表示范围(-128~127,和char的类型一样大)
		C. 调用_exit函数或_Exit函数
			exit函数是库函数, _exit和_Exit函数是系统调用, 库函数是依赖于系统调用的,除此以外,_exit直接结束进程,不会去调用atexit注册过的钩子函数.
		D. 最后一个线程其启动例程(线程本身)返回
		E. 最后一个线程调用pthread_exit

	异常终止(3种):
		A. 调用abort, abort函数会发送一个signal_abort信号给当前进程,杀掉当前进程并且得到一个coredump文件
		B. 接到一个信号并终止
		C. 最后一个线程对其取消请求作出响应


	atexit():钩子函数, register a function to be called at normal process termination
	on_exit():钩子函数,和atexit大同小异,两者的区别是atexit是标准函数,on_exit只在某些平台下才有
3. 命令行参数的分析
4. 环境变量
5. C程序的存储空间布局
6. 库
7. 函数跳转 
8. 资源的获取及控制
